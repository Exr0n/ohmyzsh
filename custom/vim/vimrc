set nocompatible
exe 'set rtp+=' . $VIMROOT

syntax on

call plug#begin($VIMROOT . '/plugged')

Plug 'scrooloose/nerdtree'
autocmd vimenter * NERDTree
" auto quit if nerdtree is the only open window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" auto start on the correct window (not nerdtree)
autocmd vimenter * wincmd l

"map cn to NERDTreeToggle
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1

Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1


" set up YouCompleteMe, which is apparently a pain (jack doesn't want to teach me)
" also UltiSnips
" Editing
Plug 'dkarter/bullets.vim'
Plug 'preservim/nerdcommenter'
Plug 'jiangmiao/auto-pairs'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" LSP / Linting
command! -nargs=0 Prettier :CocCommand prettier.formatFile
" CoC options
set cmdheight=2
set signcolumn=yes
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"   Completion window
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"   Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
imap <C-h> <plug>(fzf-complete-line)

" Colors
Plug 'cocopon/pgmnt.vim'
Plug 'keith/parsec.vim'
Plug 'niklas-8/vim-darkspace'
Plug 'cocopon/iceberg.vim'

" HUD
Plug 'dense-analysis/ale'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'luochen1990/rainbow'
Plug 'airblade/vim-gitgutter'
Plug 'ryanoasis/vim-devicons'
"   tmux integration
Plug 'edkolev/tmuxline.vim'
Plug 'christoomey/vim-tmux-navigator'

let g:tmuxline_preset = 'nightly_fox'

let g:airline_theme='bubblegum'


" HUD Toggles
Plug 'junegunn/limelight.vim'
let g:limelight_default_coefficient = 0.3
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_paragraph_span = 1

let g:darkspace_italics=1
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle

Plug 'vim-scripts/taglist.vim'

call plug#end()

" TODO: this doesn't work??
" highlight Comment cterm=italic

" My Customs
" " CUSTOM: change backup dir https://stackoverflow.com/a/1625850/10372825
set backupdir=$VIMROOT/autogentmp//
set directory=$VIMROOT/autogentmp//
set undodir=$VIMROOT/autogentmp//,~/.vim/autogentmp/undo//

" jump to previous position https://stackoverflow.com/questions/774560/in-vim-how-do-i-get-a-file-to-open-at-the-same-line-number-i-closed-it-at-last
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

" from https://www.linode.com/docs/tools-reference/tools/introduction-to-vim-customization/
syntax on " turn on sytax highlighting
set ttyfast " speed up scrolling
set scrolloff=5 " display 8 lines above and below cursor at all times
set matchpairs+=<:>

" passive and HUD
set number " line numbers
set ruler " display current cursor "coordinates"
set showmatch " highlight the matching bracket
	" show invisibles
set encoding=utf-8
set listchars=eol:⏎,tab:→·,trail:·,extends:>,precedes:<
set list
	" colors
set background=dark
set termguicolors
"colorscheme iceberg
colorscheme darkspace

" set search stuff
set hlsearch
set incsearch
set ignorecase
set smartcase
" remove search highlight on escape
" nnoremap <esc> :noh<return><esc>

" tab sizing
set tabstop=4
set shiftwidth=4
set expandtab
set ai " autoindent
set si " smart indent

" stop physical line wrapping
" https://stackoverflow.com/questions/2280030/how-to-stop-line-breaking-in-vim
set textwidth=0
set wrapmargin=0

" code folding: https://codeyarns.com/2014/09/02/how-to-fold-code-in-vim/
set foldmethod=indent
set foldlevelstart=5
set nofoldenable

" cursor stuff
set mouse=a
set cursorline

" background and performance
set lazyredraw " don't redraw when executing macros

" Delete trailing white space on save, useful for some filetypes ;)
" Stolen from https://github.com/nickmahd/.vim/blob/master/vimrc in Jan 2020
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee,*.cpp :call CleanExtraSpaces()
endif


" custom keymaps
let mapleader = " "
nnoremap <Leader>cc :noh<return>
inoremap jh <Esc>
inoremap jt <Esc>:w<return>
set timeoutlen=500
" movement in insert mode
iunmap <C-h>
inoremap <C-h> <Left>
inoremap <C-l> <right>
" panes and splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" clipboard https://coderwall.com/p/v-st8w/vim-copy-to-system-clipboard-on-a-mac
vmap '' :w !pbcopy<CR><CR>

set splitbelow
set splitright
